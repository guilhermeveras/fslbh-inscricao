<?php

/**
 * Base class that represents a row from the 'cadastro' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Qua 09 Set 2009 20:50:29 BRT
 *
 * @package    lib.model.om
 */
abstract class BaseCadastro extends BaseObject  implements Persistent {


  const PEER = 'CadastroPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CadastroPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the nome field.
	 * @var        string
	 */
	protected $nome;

	/**
	 * The value for the cpf field.
	 * @var        string
	 */
	protected $cpf;

	/**
	 * The value for the email_pessoal field.
	 * @var        string
	 */
	protected $email_pessoal;

	/**
	 * The value for the email_profissional field.
	 * @var        string
	 */
	protected $email_profissional;

	/**
	 * The value for the municipio field.
	 * @var        string
	 */
	protected $municipio;

	/**
	 * The value for the telefone field.
	 * @var        string
	 */
	protected $telefone;

	/**
	 * The value for the validado field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $validado;

	/**
	 * The value for the logradouro field.
	 * @var        string
	 */
	protected $logradouro;

	/**
	 * The value for the bairro field.
	 * @var        string
	 */
	protected $bairro;

	/**
	 * The value for the numero field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $numero;

	/**
	 * The value for the complemento field.
	 * @var        string
	 */
	protected $complemento;

	/**
	 * The value for the estado field.
	 * @var        string
	 */
	protected $estado;

	/**
	 * The value for the cep field.
	 * @var        string
	 */
	protected $cep;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the instituicao_trabalho field.
	 * @var        string
	 */
	protected $instituicao_trabalho;

	/**
	 * The value for the profissao field.
	 * @var        string
	 */
	protected $profissao;

	/**
	 * The value for the opcao_1_oficina field.
	 * @var        int
	 */
	protected $opcao_1_oficina;

	/**
	 * The value for the opcao_2_oficina field.
	 * @var        int
	 */
	protected $opcao_2_oficina;

	/**
	 * The value for the sexo field.
	 * @var        boolean
	 */
	protected $sexo;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCadastro object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->validado = false;
		$this->numero = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [nome] column value.
	 * 
	 * @return     string
	 */
	public function getNome()
	{
		return $this->nome;
	}

	/**
	 * Get the [cpf] column value.
	 * 
	 * @return     string
	 */
	public function getCpf()
	{
		return $this->cpf;
	}

	/**
	 * Get the [email_pessoal] column value.
	 * 
	 * @return     string
	 */
	public function getEmailPessoal()
	{
		return $this->email_pessoal;
	}

	/**
	 * Get the [email_profissional] column value.
	 * 
	 * @return     string
	 */
	public function getEmailProfissional()
	{
		return $this->email_profissional;
	}

	/**
	 * Get the [municipio] column value.
	 * 
	 * @return     string
	 */
	public function getMunicipio()
	{
		return $this->municipio;
	}

	/**
	 * Get the [telefone] column value.
	 * 
	 * @return     string
	 */
	public function getTelefone()
	{
		return $this->telefone;
	}

	/**
	 * Get the [validado] column value.
	 * 
	 * @return     boolean
	 */
	public function getValidado()
	{
		return $this->validado;
	}

	/**
	 * Get the [logradouro] column value.
	 * 
	 * @return     string
	 */
	public function getLogradouro()
	{
		return $this->logradouro;
	}

	/**
	 * Get the [bairro] column value.
	 * 
	 * @return     string
	 */
	public function getBairro()
	{
		return $this->bairro;
	}

	/**
	 * Get the [numero] column value.
	 * 
	 * @return     int
	 */
	public function getNumero()
	{
		return $this->numero;
	}

	/**
	 * Get the [complemento] column value.
	 * 
	 * @return     string
	 */
	public function getComplemento()
	{
		return $this->complemento;
	}

	/**
	 * Get the [estado] column value.
	 * 
	 * @return     string
	 */
	public function getEstado()
	{
		return $this->estado;
	}

	/**
	 * Get the [cep] column value.
	 * 
	 * @return     string
	 */
	public function getCep()
	{
		return $this->cep;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->created_at);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [celular] column value.
	 * 
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [instituicao_trabalho] column value.
	 * 
	 * @return     string
	 */
	public function getInstituicaoTrabalho()
	{
		return $this->instituicao_trabalho;
	}

	/**
	 * Get the [profissao] column value.
	 * 
	 * @return     string
	 */
	public function getProfissao()
	{
		return $this->profissao;
	}

	/**
	 * Get the [opcao_1_oficina] column value.
	 * 
	 * @return     int
	 */
	public function getOpcao1Oficina()
	{
		return $this->opcao_1_oficina;
	}

	/**
	 * Get the [opcao_2_oficina] column value.
	 * 
	 * @return     int
	 */
	public function getOpcao2Oficina()
	{
		return $this->opcao_2_oficina;
	}

	/**
	 * Get the [sexo] column value.
	 * 
	 * @return     boolean
	 */
	public function getSexo()
	{
		return $this->sexo;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CadastroPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [nome] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setNome($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nome !== $v) {
			$this->nome = $v;
			$this->modifiedColumns[] = CadastroPeer::NOME;
		}

		return $this;
	} // setNome()

	/**
	 * Set the value of [cpf] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCpf($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cpf !== $v) {
			$this->cpf = $v;
			$this->modifiedColumns[] = CadastroPeer::CPF;
		}

		return $this;
	} // setCpf()

	/**
	 * Set the value of [email_pessoal] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEmailPessoal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email_pessoal !== $v) {
			$this->email_pessoal = $v;
			$this->modifiedColumns[] = CadastroPeer::EMAIL_PESSOAL;
		}

		return $this;
	} // setEmailPessoal()

	/**
	 * Set the value of [email_profissional] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEmailProfissional($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email_profissional !== $v) {
			$this->email_profissional = $v;
			$this->modifiedColumns[] = CadastroPeer::EMAIL_PROFISSIONAL;
		}

		return $this;
	} // setEmailProfissional()

	/**
	 * Set the value of [municipio] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setMunicipio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->municipio !== $v) {
			$this->municipio = $v;
			$this->modifiedColumns[] = CadastroPeer::MUNICIPIO;
		}

		return $this;
	} // setMunicipio()

	/**
	 * Set the value of [telefone] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setTelefone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefone !== $v) {
			$this->telefone = $v;
			$this->modifiedColumns[] = CadastroPeer::TELEFONE;
		}

		return $this;
	} // setTelefone()

	/**
	 * Set the value of [validado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setValidado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->validado !== $v || $v === false) {
			$this->validado = $v;
			$this->modifiedColumns[] = CadastroPeer::VALIDADO;
		}

		return $this;
	} // setValidado()

	/**
	 * Set the value of [logradouro] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setLogradouro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->logradouro !== $v) {
			$this->logradouro = $v;
			$this->modifiedColumns[] = CadastroPeer::LOGRADOURO;
		}

		return $this;
	} // setLogradouro()

	/**
	 * Set the value of [bairro] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setBairro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bairro !== $v) {
			$this->bairro = $v;
			$this->modifiedColumns[] = CadastroPeer::BAIRRO;
		}

		return $this;
	} // setBairro()

	/**
	 * Set the value of [numero] column.
	 * 
	 * @param      int $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setNumero($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->numero !== $v || $v === 0) {
			$this->numero = $v;
			$this->modifiedColumns[] = CadastroPeer::NUMERO;
		}

		return $this;
	} // setNumero()

	/**
	 * Set the value of [complemento] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setComplemento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->complemento !== $v) {
			$this->complemento = $v;
			$this->modifiedColumns[] = CadastroPeer::COMPLEMENTO;
		}

		return $this;
	} // setComplemento()

	/**
	 * Set the value of [estado] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setEstado($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->estado !== $v) {
			$this->estado = $v;
			$this->modifiedColumns[] = CadastroPeer::ESTADO;
		}

		return $this;
	} // setEstado()

	/**
	 * Set the value of [cep] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCep($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cep !== $v) {
			$this->cep = $v;
			$this->modifiedColumns[] = CadastroPeer::CEP;
		}

		return $this;
	} // setCep()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d\\TH:i:sO') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d\\TH:i:sO') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d\\TH:i:sO') : null);
				$this->modifiedColumns[] = CadastroPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [celular] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = CadastroPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [instituicao_trabalho] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setInstituicaoTrabalho($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->instituicao_trabalho !== $v) {
			$this->instituicao_trabalho = $v;
			$this->modifiedColumns[] = CadastroPeer::INSTITUICAO_TRABALHO;
		}

		return $this;
	} // setInstituicaoTrabalho()

	/**
	 * Set the value of [profissao] column.
	 * 
	 * @param      string $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setProfissao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profissao !== $v) {
			$this->profissao = $v;
			$this->modifiedColumns[] = CadastroPeer::PROFISSAO;
		}

		return $this;
	} // setProfissao()

	/**
	 * Set the value of [opcao_1_oficina] column.
	 * 
	 * @param      int $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setOpcao1Oficina($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->opcao_1_oficina !== $v) {
			$this->opcao_1_oficina = $v;
			$this->modifiedColumns[] = CadastroPeer::OPCAO_1_OFICINA;
		}

		return $this;
	} // setOpcao1Oficina()

	/**
	 * Set the value of [opcao_2_oficina] column.
	 * 
	 * @param      int $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setOpcao2Oficina($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->opcao_2_oficina !== $v) {
			$this->opcao_2_oficina = $v;
			$this->modifiedColumns[] = CadastroPeer::OPCAO_2_OFICINA;
		}

		return $this;
	} // setOpcao2Oficina()

	/**
	 * Set the value of [sexo] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Cadastro The current object (for fluent API support)
	 */
	public function setSexo($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->sexo !== $v) {
			$this->sexo = $v;
			$this->modifiedColumns[] = CadastroPeer::SEXO;
		}

		return $this;
	} // setSexo()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(CadastroPeer::VALIDADO,CadastroPeer::NUMERO))) {
				return false;
			}

			if ($this->validado !== false) {
				return false;
			}

			if ($this->numero !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->nome = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->cpf = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->email_pessoal = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->email_profissional = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->municipio = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->telefone = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->validado = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->logradouro = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->bairro = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->numero = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->complemento = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->estado = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->cep = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->created_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->celular = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->instituicao_trabalho = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->profissao = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->opcao_1_oficina = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->opcao_2_oficina = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->sexo = ($row[$startcol + 20] !== null) ? (boolean) $row[$startcol + 20] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 21; // 21 = CadastroPeer::NUM_COLUMNS - CadastroPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Cadastro object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CadastroPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CadastroPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCadastro:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CadastroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CadastroPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCadastro:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCadastro:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(CadastroPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CadastroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCadastro:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CadastroPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CadastroPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CadastroPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CadastroPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = CadastroPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CadastroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getNome();
				break;
			case 2:
				return $this->getCpf();
				break;
			case 3:
				return $this->getEmailPessoal();
				break;
			case 4:
				return $this->getEmailProfissional();
				break;
			case 5:
				return $this->getMunicipio();
				break;
			case 6:
				return $this->getTelefone();
				break;
			case 7:
				return $this->getValidado();
				break;
			case 8:
				return $this->getLogradouro();
				break;
			case 9:
				return $this->getBairro();
				break;
			case 10:
				return $this->getNumero();
				break;
			case 11:
				return $this->getComplemento();
				break;
			case 12:
				return $this->getEstado();
				break;
			case 13:
				return $this->getCep();
				break;
			case 14:
				return $this->getCreatedAt();
				break;
			case 15:
				return $this->getCelular();
				break;
			case 16:
				return $this->getInstituicaoTrabalho();
				break;
			case 17:
				return $this->getProfissao();
				break;
			case 18:
				return $this->getOpcao1Oficina();
				break;
			case 19:
				return $this->getOpcao2Oficina();
				break;
			case 20:
				return $this->getSexo();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CadastroPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getNome(),
			$keys[2] => $this->getCpf(),
			$keys[3] => $this->getEmailPessoal(),
			$keys[4] => $this->getEmailProfissional(),
			$keys[5] => $this->getMunicipio(),
			$keys[6] => $this->getTelefone(),
			$keys[7] => $this->getValidado(),
			$keys[8] => $this->getLogradouro(),
			$keys[9] => $this->getBairro(),
			$keys[10] => $this->getNumero(),
			$keys[11] => $this->getComplemento(),
			$keys[12] => $this->getEstado(),
			$keys[13] => $this->getCep(),
			$keys[14] => $this->getCreatedAt(),
			$keys[15] => $this->getCelular(),
			$keys[16] => $this->getInstituicaoTrabalho(),
			$keys[17] => $this->getProfissao(),
			$keys[18] => $this->getOpcao1Oficina(),
			$keys[19] => $this->getOpcao2Oficina(),
			$keys[20] => $this->getSexo(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CadastroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setNome($value);
				break;
			case 2:
				$this->setCpf($value);
				break;
			case 3:
				$this->setEmailPessoal($value);
				break;
			case 4:
				$this->setEmailProfissional($value);
				break;
			case 5:
				$this->setMunicipio($value);
				break;
			case 6:
				$this->setTelefone($value);
				break;
			case 7:
				$this->setValidado($value);
				break;
			case 8:
				$this->setLogradouro($value);
				break;
			case 9:
				$this->setBairro($value);
				break;
			case 10:
				$this->setNumero($value);
				break;
			case 11:
				$this->setComplemento($value);
				break;
			case 12:
				$this->setEstado($value);
				break;
			case 13:
				$this->setCep($value);
				break;
			case 14:
				$this->setCreatedAt($value);
				break;
			case 15:
				$this->setCelular($value);
				break;
			case 16:
				$this->setInstituicaoTrabalho($value);
				break;
			case 17:
				$this->setProfissao($value);
				break;
			case 18:
				$this->setOpcao1Oficina($value);
				break;
			case 19:
				$this->setOpcao2Oficina($value);
				break;
			case 20:
				$this->setSexo($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CadastroPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNome($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCpf($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEmailPessoal($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setEmailProfissional($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setMunicipio($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTelefone($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setValidado($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setLogradouro($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setBairro($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setNumero($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setComplemento($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setEstado($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCep($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCreatedAt($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCelular($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setInstituicaoTrabalho($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setProfissao($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setOpcao1Oficina($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setOpcao2Oficina($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setSexo($arr[$keys[20]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CadastroPeer::DATABASE_NAME);

		if ($this->isColumnModified(CadastroPeer::ID)) $criteria->add(CadastroPeer::ID, $this->id);
		if ($this->isColumnModified(CadastroPeer::NOME)) $criteria->add(CadastroPeer::NOME, $this->nome);
		if ($this->isColumnModified(CadastroPeer::CPF)) $criteria->add(CadastroPeer::CPF, $this->cpf);
		if ($this->isColumnModified(CadastroPeer::EMAIL_PESSOAL)) $criteria->add(CadastroPeer::EMAIL_PESSOAL, $this->email_pessoal);
		if ($this->isColumnModified(CadastroPeer::EMAIL_PROFISSIONAL)) $criteria->add(CadastroPeer::EMAIL_PROFISSIONAL, $this->email_profissional);
		if ($this->isColumnModified(CadastroPeer::MUNICIPIO)) $criteria->add(CadastroPeer::MUNICIPIO, $this->municipio);
		if ($this->isColumnModified(CadastroPeer::TELEFONE)) $criteria->add(CadastroPeer::TELEFONE, $this->telefone);
		if ($this->isColumnModified(CadastroPeer::VALIDADO)) $criteria->add(CadastroPeer::VALIDADO, $this->validado);
		if ($this->isColumnModified(CadastroPeer::LOGRADOURO)) $criteria->add(CadastroPeer::LOGRADOURO, $this->logradouro);
		if ($this->isColumnModified(CadastroPeer::BAIRRO)) $criteria->add(CadastroPeer::BAIRRO, $this->bairro);
		if ($this->isColumnModified(CadastroPeer::NUMERO)) $criteria->add(CadastroPeer::NUMERO, $this->numero);
		if ($this->isColumnModified(CadastroPeer::COMPLEMENTO)) $criteria->add(CadastroPeer::COMPLEMENTO, $this->complemento);
		if ($this->isColumnModified(CadastroPeer::ESTADO)) $criteria->add(CadastroPeer::ESTADO, $this->estado);
		if ($this->isColumnModified(CadastroPeer::CEP)) $criteria->add(CadastroPeer::CEP, $this->cep);
		if ($this->isColumnModified(CadastroPeer::CREATED_AT)) $criteria->add(CadastroPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(CadastroPeer::CELULAR)) $criteria->add(CadastroPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(CadastroPeer::INSTITUICAO_TRABALHO)) $criteria->add(CadastroPeer::INSTITUICAO_TRABALHO, $this->instituicao_trabalho);
		if ($this->isColumnModified(CadastroPeer::PROFISSAO)) $criteria->add(CadastroPeer::PROFISSAO, $this->profissao);
		if ($this->isColumnModified(CadastroPeer::OPCAO_1_OFICINA)) $criteria->add(CadastroPeer::OPCAO_1_OFICINA, $this->opcao_1_oficina);
		if ($this->isColumnModified(CadastroPeer::OPCAO_2_OFICINA)) $criteria->add(CadastroPeer::OPCAO_2_OFICINA, $this->opcao_2_oficina);
		if ($this->isColumnModified(CadastroPeer::SEXO)) $criteria->add(CadastroPeer::SEXO, $this->sexo);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CadastroPeer::DATABASE_NAME);

		$criteria->add(CadastroPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Cadastro (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNome($this->nome);

		$copyObj->setCpf($this->cpf);

		$copyObj->setEmailPessoal($this->email_pessoal);

		$copyObj->setEmailProfissional($this->email_profissional);

		$copyObj->setMunicipio($this->municipio);

		$copyObj->setTelefone($this->telefone);

		$copyObj->setValidado($this->validado);

		$copyObj->setLogradouro($this->logradouro);

		$copyObj->setBairro($this->bairro);

		$copyObj->setNumero($this->numero);

		$copyObj->setComplemento($this->complemento);

		$copyObj->setEstado($this->estado);

		$copyObj->setCep($this->cep);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setCelular($this->celular);

		$copyObj->setInstituicaoTrabalho($this->instituicao_trabalho);

		$copyObj->setProfissao($this->profissao);

		$copyObj->setOpcao1Oficina($this->opcao_1_oficina);

		$copyObj->setOpcao2Oficina($this->opcao_2_oficina);

		$copyObj->setSexo($this->sexo);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Cadastro Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CadastroPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CadastroPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCadastro:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCadastro::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCadastro
