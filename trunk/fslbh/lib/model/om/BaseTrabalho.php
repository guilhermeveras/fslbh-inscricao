<?php

/**
 * Base class that represents a row from the 'trabalho' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed May 20 10:52:52 2009
 *
 * @package    lib.model.om
 */
abstract class BaseTrabalho extends BaseObject  implements Persistent {


  const PEER = 'TrabalhoPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TrabalhoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the primeiro_nome field.
	 * @var        string
	 */
	protected $primeiro_nome;

	/**
	 * The value for the nome_meio field.
	 * @var        string
	 */
	protected $nome_meio;

	/**
	 * The value for the sobrenome field.
	 * @var        string
	 */
	protected $sobrenome;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the instituicao field.
	 * @var        string
	 */
	protected $instituicao;

	/**
	 * The value for the resumo_biografia field.
	 * @var        string
	 */
	protected $resumo_biografia;

	/**
	 * The value for the eixo_tematico_id field.
	 * @var        int
	 */
	protected $eixo_tematico_id;

	/**
	 * The value for the arquivo field.
	 * @var        string
	 */
	protected $arquivo;

	/**
	 * The value for the aprovado field.
	 * @var        boolean
	 */
	protected $aprovado;

	/**
	 * The value for the titulo field.
	 * @var        string
	 */
	protected $titulo;

	/**
	 * The value for the contato_correspondencia field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $contato_correspondencia;

	/**
	 * @var        EixoTematico
	 */
	protected $aEixoTematico;

	/**
	 * @var        array CoAutor[] Collection to store aggregation of CoAutor objects.
	 */
	protected $collCoAutors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCoAutors.
	 */
	private $lastCoAutorCriteria = null;

	/**
	 * @var        array TrabalhosAvaliador[] Collection to store aggregation of TrabalhosAvaliador objects.
	 */
	protected $collTrabalhosAvaliadors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTrabalhosAvaliadors.
	 */
	private $lastTrabalhosAvaliadorCriteria = null;

	/**
	 * @var        array UsuariosTrabalho[] Collection to store aggregation of UsuariosTrabalho objects.
	 */
	protected $collUsuariosTrabalhos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsuariosTrabalhos.
	 */
	private $lastUsuariosTrabalhoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseTrabalho object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->contato_correspondencia = true;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [primeiro_nome] column value.
	 * 
	 * @return     string
	 */
	public function getPrimeiroNome()
	{
		return $this->primeiro_nome;
	}

	/**
	 * Get the [nome_meio] column value.
	 * 
	 * @return     string
	 */
	public function getNomeMeio()
	{
		return $this->nome_meio;
	}

	/**
	 * Get the [sobrenome] column value.
	 * 
	 * @return     string
	 */
	public function getSobrenome()
	{
		return $this->sobrenome;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [instituicao] column value.
	 * 
	 * @return     string
	 */
	public function getInstituicao()
	{
		return $this->instituicao;
	}

	/**
	 * Get the [resumo_biografia] column value.
	 * 
	 * @return     string
	 */
	public function getResumoBiografia()
	{
		return $this->resumo_biografia;
	}

	/**
	 * Get the [eixo_tematico_id] column value.
	 * 
	 * @return     int
	 */
	public function getEixoTematicoId()
	{
		return $this->eixo_tematico_id;
	}

	/**
	 * Get the [arquivo] column value.
	 * 
	 * @return     string
	 */
	public function getArquivo()
	{
		return $this->arquivo;
	}

	/**
	 * Get the [aprovado] column value.
	 * 
	 * @return     boolean
	 */
	public function getAprovado()
	{
		return $this->aprovado;
	}

	/**
	 * Get the [titulo] column value.
	 * 
	 * @return     string
	 */
	public function getTitulo()
	{
		return $this->titulo;
	}

	/**
	 * Get the [contato_correspondencia] column value.
	 * 
	 * @return     boolean
	 */
	public function getContatoCorrespondencia()
	{
		return $this->contato_correspondencia;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = TrabalhoPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [primeiro_nome] column.
	 * 
	 * @param      string $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setPrimeiroNome($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->primeiro_nome !== $v) {
			$this->primeiro_nome = $v;
			$this->modifiedColumns[] = TrabalhoPeer::PRIMEIRO_NOME;
		}

		return $this;
	} // setPrimeiroNome()

	/**
	 * Set the value of [nome_meio] column.
	 * 
	 * @param      string $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setNomeMeio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nome_meio !== $v) {
			$this->nome_meio = $v;
			$this->modifiedColumns[] = TrabalhoPeer::NOME_MEIO;
		}

		return $this;
	} // setNomeMeio()

	/**
	 * Set the value of [sobrenome] column.
	 * 
	 * @param      string $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setSobrenome($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sobrenome !== $v) {
			$this->sobrenome = $v;
			$this->modifiedColumns[] = TrabalhoPeer::SOBRENOME;
		}

		return $this;
	} // setSobrenome()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = TrabalhoPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [instituicao] column.
	 * 
	 * @param      string $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setInstituicao($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->instituicao !== $v) {
			$this->instituicao = $v;
			$this->modifiedColumns[] = TrabalhoPeer::INSTITUICAO;
		}

		return $this;
	} // setInstituicao()

	/**
	 * Set the value of [resumo_biografia] column.
	 * 
	 * @param      string $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setResumoBiografia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->resumo_biografia !== $v) {
			$this->resumo_biografia = $v;
			$this->modifiedColumns[] = TrabalhoPeer::RESUMO_BIOGRAFIA;
		}

		return $this;
	} // setResumoBiografia()

	/**
	 * Set the value of [eixo_tematico_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setEixoTematicoId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->eixo_tematico_id !== $v) {
			$this->eixo_tematico_id = $v;
			$this->modifiedColumns[] = TrabalhoPeer::EIXO_TEMATICO_ID;
		}

		if ($this->aEixoTematico !== null && $this->aEixoTematico->getId() !== $v) {
			$this->aEixoTematico = null;
		}

		return $this;
	} // setEixoTematicoId()

	/**
	 * Set the value of [arquivo] column.
	 * 
	 * @param      string $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setArquivo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->arquivo !== $v) {
			$this->arquivo = $v;
			$this->modifiedColumns[] = TrabalhoPeer::ARQUIVO;
		}

		return $this;
	} // setArquivo()

	/**
	 * Set the value of [aprovado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setAprovado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->aprovado !== $v) {
			$this->aprovado = $v;
			$this->modifiedColumns[] = TrabalhoPeer::APROVADO;
		}

		return $this;
	} // setAprovado()

	/**
	 * Set the value of [titulo] column.
	 * 
	 * @param      string $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setTitulo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->titulo !== $v) {
			$this->titulo = $v;
			$this->modifiedColumns[] = TrabalhoPeer::TITULO;
		}

		return $this;
	} // setTitulo()

	/**
	 * Set the value of [contato_correspondencia] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Trabalho The current object (for fluent API support)
	 */
	public function setContatoCorrespondencia($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->contato_correspondencia !== $v || $v === true) {
			$this->contato_correspondencia = $v;
			$this->modifiedColumns[] = TrabalhoPeer::CONTATO_CORRESPONDENCIA;
		}

		return $this;
	} // setContatoCorrespondencia()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(TrabalhoPeer::CONTATO_CORRESPONDENCIA))) {
				return false;
			}

			if ($this->contato_correspondencia !== true) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->primeiro_nome = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->nome_meio = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->sobrenome = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->email = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->instituicao = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->resumo_biografia = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->eixo_tematico_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->arquivo = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->aprovado = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->titulo = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->contato_correspondencia = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 12; // 12 = TrabalhoPeer::NUM_COLUMNS - TrabalhoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Trabalho object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aEixoTematico !== null && $this->eixo_tematico_id !== $this->aEixoTematico->getId()) {
			$this->aEixoTematico = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TrabalhoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TrabalhoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aEixoTematico = null;
			$this->collCoAutors = null;
			$this->lastCoAutorCriteria = null;

			$this->collTrabalhosAvaliadors = null;
			$this->lastTrabalhosAvaliadorCriteria = null;

			$this->collUsuariosTrabalhos = null;
			$this->lastUsuariosTrabalhoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseTrabalho:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TrabalhoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			TrabalhoPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseTrabalho:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseTrabalho:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TrabalhoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseTrabalho:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			TrabalhoPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEixoTematico !== null) {
				if ($this->aEixoTematico->isModified() || $this->aEixoTematico->isNew()) {
					$affectedRows += $this->aEixoTematico->save($con);
				}
				$this->setEixoTematico($this->aEixoTematico);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TrabalhoPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TrabalhoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TrabalhoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCoAutors !== null) {
				foreach ($this->collCoAutors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTrabalhosAvaliadors !== null) {
				foreach ($this->collTrabalhosAvaliadors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsuariosTrabalhos !== null) {
				foreach ($this->collUsuariosTrabalhos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEixoTematico !== null) {
				if (!$this->aEixoTematico->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEixoTematico->getValidationFailures());
				}
			}


			if (($retval = TrabalhoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCoAutors !== null) {
					foreach ($this->collCoAutors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTrabalhosAvaliadors !== null) {
					foreach ($this->collTrabalhosAvaliadors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsuariosTrabalhos !== null) {
					foreach ($this->collUsuariosTrabalhos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TrabalhoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getPrimeiroNome();
				break;
			case 2:
				return $this->getNomeMeio();
				break;
			case 3:
				return $this->getSobrenome();
				break;
			case 4:
				return $this->getEmail();
				break;
			case 5:
				return $this->getInstituicao();
				break;
			case 6:
				return $this->getResumoBiografia();
				break;
			case 7:
				return $this->getEixoTematicoId();
				break;
			case 8:
				return $this->getArquivo();
				break;
			case 9:
				return $this->getAprovado();
				break;
			case 10:
				return $this->getTitulo();
				break;
			case 11:
				return $this->getContatoCorrespondencia();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TrabalhoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getPrimeiroNome(),
			$keys[2] => $this->getNomeMeio(),
			$keys[3] => $this->getSobrenome(),
			$keys[4] => $this->getEmail(),
			$keys[5] => $this->getInstituicao(),
			$keys[6] => $this->getResumoBiografia(),
			$keys[7] => $this->getEixoTematicoId(),
			$keys[8] => $this->getArquivo(),
			$keys[9] => $this->getAprovado(),
			$keys[10] => $this->getTitulo(),
			$keys[11] => $this->getContatoCorrespondencia(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TrabalhoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setPrimeiroNome($value);
				break;
			case 2:
				$this->setNomeMeio($value);
				break;
			case 3:
				$this->setSobrenome($value);
				break;
			case 4:
				$this->setEmail($value);
				break;
			case 5:
				$this->setInstituicao($value);
				break;
			case 6:
				$this->setResumoBiografia($value);
				break;
			case 7:
				$this->setEixoTematicoId($value);
				break;
			case 8:
				$this->setArquivo($value);
				break;
			case 9:
				$this->setAprovado($value);
				break;
			case 10:
				$this->setTitulo($value);
				break;
			case 11:
				$this->setContatoCorrespondencia($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TrabalhoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPrimeiroNome($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNomeMeio($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSobrenome($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setEmail($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setInstituicao($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setResumoBiografia($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEixoTematicoId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setArquivo($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setAprovado($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setTitulo($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setContatoCorrespondencia($arr[$keys[11]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);

		if ($this->isColumnModified(TrabalhoPeer::ID)) $criteria->add(TrabalhoPeer::ID, $this->id);
		if ($this->isColumnModified(TrabalhoPeer::PRIMEIRO_NOME)) $criteria->add(TrabalhoPeer::PRIMEIRO_NOME, $this->primeiro_nome);
		if ($this->isColumnModified(TrabalhoPeer::NOME_MEIO)) $criteria->add(TrabalhoPeer::NOME_MEIO, $this->nome_meio);
		if ($this->isColumnModified(TrabalhoPeer::SOBRENOME)) $criteria->add(TrabalhoPeer::SOBRENOME, $this->sobrenome);
		if ($this->isColumnModified(TrabalhoPeer::EMAIL)) $criteria->add(TrabalhoPeer::EMAIL, $this->email);
		if ($this->isColumnModified(TrabalhoPeer::INSTITUICAO)) $criteria->add(TrabalhoPeer::INSTITUICAO, $this->instituicao);
		if ($this->isColumnModified(TrabalhoPeer::RESUMO_BIOGRAFIA)) $criteria->add(TrabalhoPeer::RESUMO_BIOGRAFIA, $this->resumo_biografia);
		if ($this->isColumnModified(TrabalhoPeer::EIXO_TEMATICO_ID)) $criteria->add(TrabalhoPeer::EIXO_TEMATICO_ID, $this->eixo_tematico_id);
		if ($this->isColumnModified(TrabalhoPeer::ARQUIVO)) $criteria->add(TrabalhoPeer::ARQUIVO, $this->arquivo);
		if ($this->isColumnModified(TrabalhoPeer::APROVADO)) $criteria->add(TrabalhoPeer::APROVADO, $this->aprovado);
		if ($this->isColumnModified(TrabalhoPeer::TITULO)) $criteria->add(TrabalhoPeer::TITULO, $this->titulo);
		if ($this->isColumnModified(TrabalhoPeer::CONTATO_CORRESPONDENCIA)) $criteria->add(TrabalhoPeer::CONTATO_CORRESPONDENCIA, $this->contato_correspondencia);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);

		$criteria->add(TrabalhoPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Trabalho (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPrimeiroNome($this->primeiro_nome);

		$copyObj->setNomeMeio($this->nome_meio);

		$copyObj->setSobrenome($this->sobrenome);

		$copyObj->setEmail($this->email);

		$copyObj->setInstituicao($this->instituicao);

		$copyObj->setResumoBiografia($this->resumo_biografia);

		$copyObj->setEixoTematicoId($this->eixo_tematico_id);

		$copyObj->setArquivo($this->arquivo);

		$copyObj->setAprovado($this->aprovado);

		$copyObj->setTitulo($this->titulo);

		$copyObj->setContatoCorrespondencia($this->contato_correspondencia);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCoAutors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCoAutor($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTrabalhosAvaliadors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTrabalhosAvaliador($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsuariosTrabalhos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsuariosTrabalho($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Trabalho Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TrabalhoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TrabalhoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a EixoTematico object.
	 *
	 * @param      EixoTematico $v
	 * @return     Trabalho The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEixoTematico(EixoTematico $v = null)
	{
		if ($v === null) {
			$this->setEixoTematicoId(NULL);
		} else {
			$this->setEixoTematicoId($v->getId());
		}

		$this->aEixoTematico = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the EixoTematico object, it will not be re-added.
		if ($v !== null) {
			$v->addTrabalho($this);
		}

		return $this;
	}


	/**
	 * Get the associated EixoTematico object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     EixoTematico The associated EixoTematico object.
	 * @throws     PropelException
	 */
	public function getEixoTematico(PropelPDO $con = null)
	{
		if ($this->aEixoTematico === null && ($this->eixo_tematico_id !== null)) {
			$c = new Criteria(EixoTematicoPeer::DATABASE_NAME);
			$c->add(EixoTematicoPeer::ID, $this->eixo_tematico_id);
			$this->aEixoTematico = EixoTematicoPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEixoTematico->addTrabalhos($this);
			 */
		}
		return $this->aEixoTematico;
	}

	/**
	 * Clears out the collCoAutors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCoAutors()
	 */
	public function clearCoAutors()
	{
		$this->collCoAutors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCoAutors collection (array).
	 *
	 * By default this just sets the collCoAutors collection to an empty array (like clearcollCoAutors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCoAutors()
	{
		$this->collCoAutors = array();
	}

	/**
	 * Gets an array of CoAutor objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Trabalho has previously been saved, it will retrieve
	 * related CoAutors from storage. If this Trabalho is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CoAutor[]
	 * @throws     PropelException
	 */
	public function getCoAutors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCoAutors === null) {
			if ($this->isNew()) {
			   $this->collCoAutors = array();
			} else {

				$criteria->add(CoAutorPeer::TRABALHO_ID, $this->id);

				CoAutorPeer::addSelectColumns($criteria);
				$this->collCoAutors = CoAutorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CoAutorPeer::TRABALHO_ID, $this->id);

				CoAutorPeer::addSelectColumns($criteria);
				if (!isset($this->lastCoAutorCriteria) || !$this->lastCoAutorCriteria->equals($criteria)) {
					$this->collCoAutors = CoAutorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCoAutorCriteria = $criteria;
		return $this->collCoAutors;
	}

	/**
	 * Returns the number of related CoAutor objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CoAutor objects.
	 * @throws     PropelException
	 */
	public function countCoAutors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCoAutors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CoAutorPeer::TRABALHO_ID, $this->id);

				$count = CoAutorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CoAutorPeer::TRABALHO_ID, $this->id);

				if (!isset($this->lastCoAutorCriteria) || !$this->lastCoAutorCriteria->equals($criteria)) {
					$count = CoAutorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCoAutors);
				}
			} else {
				$count = count($this->collCoAutors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CoAutor object to this object
	 * through the CoAutor foreign key attribute.
	 *
	 * @param      CoAutor $l CoAutor
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCoAutor(CoAutor $l)
	{
		if ($this->collCoAutors === null) {
			$this->initCoAutors();
		}
		if (!in_array($l, $this->collCoAutors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCoAutors, $l);
			$l->setTrabalho($this);
		}
	}

	/**
	 * Clears out the collTrabalhosAvaliadors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTrabalhosAvaliadors()
	 */
	public function clearTrabalhosAvaliadors()
	{
		$this->collTrabalhosAvaliadors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTrabalhosAvaliadors collection (array).
	 *
	 * By default this just sets the collTrabalhosAvaliadors collection to an empty array (like clearcollTrabalhosAvaliadors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTrabalhosAvaliadors()
	{
		$this->collTrabalhosAvaliadors = array();
	}

	/**
	 * Gets an array of TrabalhosAvaliador objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Trabalho has previously been saved, it will retrieve
	 * related TrabalhosAvaliadors from storage. If this Trabalho is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TrabalhosAvaliador[]
	 * @throws     PropelException
	 */
	public function getTrabalhosAvaliadors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTrabalhosAvaliadors === null) {
			if ($this->isNew()) {
			   $this->collTrabalhosAvaliadors = array();
			} else {

				$criteria->add(TrabalhosAvaliadorPeer::TRABALHO_ID, $this->id);

				TrabalhosAvaliadorPeer::addSelectColumns($criteria);
				$this->collTrabalhosAvaliadors = TrabalhosAvaliadorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TrabalhosAvaliadorPeer::TRABALHO_ID, $this->id);

				TrabalhosAvaliadorPeer::addSelectColumns($criteria);
				if (!isset($this->lastTrabalhosAvaliadorCriteria) || !$this->lastTrabalhosAvaliadorCriteria->equals($criteria)) {
					$this->collTrabalhosAvaliadors = TrabalhosAvaliadorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTrabalhosAvaliadorCriteria = $criteria;
		return $this->collTrabalhosAvaliadors;
	}

	/**
	 * Returns the number of related TrabalhosAvaliador objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TrabalhosAvaliador objects.
	 * @throws     PropelException
	 */
	public function countTrabalhosAvaliadors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTrabalhosAvaliadors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TrabalhosAvaliadorPeer::TRABALHO_ID, $this->id);

				$count = TrabalhosAvaliadorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TrabalhosAvaliadorPeer::TRABALHO_ID, $this->id);

				if (!isset($this->lastTrabalhosAvaliadorCriteria) || !$this->lastTrabalhosAvaliadorCriteria->equals($criteria)) {
					$count = TrabalhosAvaliadorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTrabalhosAvaliadors);
				}
			} else {
				$count = count($this->collTrabalhosAvaliadors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TrabalhosAvaliador object to this object
	 * through the TrabalhosAvaliador foreign key attribute.
	 *
	 * @param      TrabalhosAvaliador $l TrabalhosAvaliador
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTrabalhosAvaliador(TrabalhosAvaliador $l)
	{
		if ($this->collTrabalhosAvaliadors === null) {
			$this->initTrabalhosAvaliadors();
		}
		if (!in_array($l, $this->collTrabalhosAvaliadors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTrabalhosAvaliadors, $l);
			$l->setTrabalho($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Trabalho is new, it will return
	 * an empty collection; or if this Trabalho has previously
	 * been saved, it will retrieve related TrabalhosAvaliadors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Trabalho.
	 */
	public function getTrabalhosAvaliadorsJoinComissao($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTrabalhosAvaliadors === null) {
			if ($this->isNew()) {
				$this->collTrabalhosAvaliadors = array();
			} else {

				$criteria->add(TrabalhosAvaliadorPeer::TRABALHO_ID, $this->id);

				$this->collTrabalhosAvaliadors = TrabalhosAvaliadorPeer::doSelectJoinComissao($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TrabalhosAvaliadorPeer::TRABALHO_ID, $this->id);

			if (!isset($this->lastTrabalhosAvaliadorCriteria) || !$this->lastTrabalhosAvaliadorCriteria->equals($criteria)) {
				$this->collTrabalhosAvaliadors = TrabalhosAvaliadorPeer::doSelectJoinComissao($criteria, $con, $join_behavior);
			}
		}
		$this->lastTrabalhosAvaliadorCriteria = $criteria;

		return $this->collTrabalhosAvaliadors;
	}

	/**
	 * Clears out the collUsuariosTrabalhos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsuariosTrabalhos()
	 */
	public function clearUsuariosTrabalhos()
	{
		$this->collUsuariosTrabalhos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsuariosTrabalhos collection (array).
	 *
	 * By default this just sets the collUsuariosTrabalhos collection to an empty array (like clearcollUsuariosTrabalhos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsuariosTrabalhos()
	{
		$this->collUsuariosTrabalhos = array();
	}

	/**
	 * Gets an array of UsuariosTrabalho objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Trabalho has previously been saved, it will retrieve
	 * related UsuariosTrabalhos from storage. If this Trabalho is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsuariosTrabalho[]
	 * @throws     PropelException
	 */
	public function getUsuariosTrabalhos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuariosTrabalhos === null) {
			if ($this->isNew()) {
			   $this->collUsuariosTrabalhos = array();
			} else {

				$criteria->add(UsuariosTrabalhoPeer::TRABALHO_ID, $this->id);

				UsuariosTrabalhoPeer::addSelectColumns($criteria);
				$this->collUsuariosTrabalhos = UsuariosTrabalhoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsuariosTrabalhoPeer::TRABALHO_ID, $this->id);

				UsuariosTrabalhoPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsuariosTrabalhoCriteria) || !$this->lastUsuariosTrabalhoCriteria->equals($criteria)) {
					$this->collUsuariosTrabalhos = UsuariosTrabalhoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsuariosTrabalhoCriteria = $criteria;
		return $this->collUsuariosTrabalhos;
	}

	/**
	 * Returns the number of related UsuariosTrabalho objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsuariosTrabalho objects.
	 * @throws     PropelException
	 */
	public function countUsuariosTrabalhos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsuariosTrabalhos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsuariosTrabalhoPeer::TRABALHO_ID, $this->id);

				$count = UsuariosTrabalhoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsuariosTrabalhoPeer::TRABALHO_ID, $this->id);

				if (!isset($this->lastUsuariosTrabalhoCriteria) || !$this->lastUsuariosTrabalhoCriteria->equals($criteria)) {
					$count = UsuariosTrabalhoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUsuariosTrabalhos);
				}
			} else {
				$count = count($this->collUsuariosTrabalhos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsuariosTrabalho object to this object
	 * through the UsuariosTrabalho foreign key attribute.
	 *
	 * @param      UsuariosTrabalho $l UsuariosTrabalho
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsuariosTrabalho(UsuariosTrabalho $l)
	{
		if ($this->collUsuariosTrabalhos === null) {
			$this->initUsuariosTrabalhos();
		}
		if (!in_array($l, $this->collUsuariosTrabalhos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsuariosTrabalhos, $l);
			$l->setTrabalho($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Trabalho is new, it will return
	 * an empty collection; or if this Trabalho has previously
	 * been saved, it will retrieve related UsuariosTrabalhos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Trabalho.
	 */
	public function getUsuariosTrabalhosJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(TrabalhoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuariosTrabalhos === null) {
			if ($this->isNew()) {
				$this->collUsuariosTrabalhos = array();
			} else {

				$criteria->add(UsuariosTrabalhoPeer::TRABALHO_ID, $this->id);

				$this->collUsuariosTrabalhos = UsuariosTrabalhoPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuariosTrabalhoPeer::TRABALHO_ID, $this->id);

			if (!isset($this->lastUsuariosTrabalhoCriteria) || !$this->lastUsuariosTrabalhoCriteria->equals($criteria)) {
				$this->collUsuariosTrabalhos = UsuariosTrabalhoPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuariosTrabalhoCriteria = $criteria;

		return $this->collUsuariosTrabalhos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCoAutors) {
				foreach ((array) $this->collCoAutors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTrabalhosAvaliadors) {
				foreach ((array) $this->collTrabalhosAvaliadors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsuariosTrabalhos) {
				foreach ((array) $this->collUsuariosTrabalhos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCoAutors = null;
		$this->collTrabalhosAvaliadors = null;
		$this->collUsuariosTrabalhos = null;
			$this->aEixoTematico = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseTrabalho:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseTrabalho::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseTrabalho
